name: Deployment Pipeline
on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region to deploy to'
        type: string
        required: true
        default: us-east-1
      application:
        description: 'Application to deploy to'
        type: choice
        required: true
        default: jarvis-demo
        options:
          - jarvis
          - jarvis-demo

permissions:
  id-token: write 
  contents: read
jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Set IAM role to assume
        id: set-role
        run: |
          if [[ "${{ inputs.application }}" == "askcto" ]]; then
            echo "role=${{ secrets.ASC_AWS_DEPLOY_ROLE_ARN }}" >> $GITHUB_OUTPUT
          else
            echo "role=${{ secrets.SAAS_AWS_DEPLOY_ROLE_ARN }}" >> $GITHUB_OUTPUT
          fi

      - name: Assume IAM role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.set-role.outputs.role }}
          role-session-name: deployment-role-session
          aws-region: ${{ inputs.region }}
      
      - name: Test AWS Connection
        run: aws sts get-caller-identity

  deploy-backend:
    name: Deploy Backend to EKS
    runs-on: ubuntu-latest
    needs: build_and_test
    env:
      SAAS_EKS_CLUSTER_NAME: ascending-s-api-cluster
      ASKCTO_EKS_CLUSTER_NAME: ascending-askcto-cluster
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest

      - name: Set IAM role to assume
        id: set-role
        run: |
          if [[ "${{ inputs.application }}" == "askcto" ]]; then
            echo "role=${{ secrets.ASC_AWS_DEPLOY_ROLE_ARN }}" >> $GITHUB_OUTPUT
          else
            echo "role=${{ secrets.SAAS_AWS_DEPLOY_ROLE_ARN }}" >> $GITHUB_OUTPUT
          fi

      - name: Assume IAM role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.set-role.outputs.role }}
          role-session-name: deployment-role-session
          aws-region: ${{ inputs.region }}
      
      - name: AWS ECR HELM Connection
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: "897729109735"

      - name: Update kubeconfig
        run: |
          if [[ "${{ inputs.application }}" == "askcto" ]]; then
            aws eks update-kubeconfig --name ${{ env.ASKCTO_EKS_CLUSTER_NAME }} --region ${{ inputs.region }}
          else
            aws eks update-kubeconfig --name ${{ env.SAAS_EKS_CLUSTER_NAME }} --region ${{ inputs.region }}
          fi
            
      - name: Sync librechat env variables
        env:
          AWS_REGION: ${{ inputs.region }}
          APP_NAME: ${{ inputs.application }}
        run: |
          echo "Updating env vars in EKS pods..."
          kubectl annotate es jarvis-env force-sync=$(date +%s) --overwrite -n ${{ inputs.application }}

      - name: Update llama index on EKS
        env:
          image: ${{ steps.login-ecr.outputs.registry }}/jarvis/google_workspace_mcp:latest
        run: kubectl set image deploy/google-workspace-mcp google-workspace-mcp=$image -n ${{ inputs.application  }}


      - name: restart pods
        run: |
          kubectl rollout restart deploy/google-workspace-mcp -n ${{ inputs.application  }}

      - name: Check pod status
        run: |
          kubectl rollout status deploy/google-workspace-mcp -n ${{ inputs.application  }}
